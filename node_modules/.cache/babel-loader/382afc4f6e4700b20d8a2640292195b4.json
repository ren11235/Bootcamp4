{"ast":null,"code":"var _jsxFileName = \"/Users/ren112/bootcamp4/src/components/RemoveBuilding.js\";\nimport React from 'react';\n\nclass AddBuilding extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\"\n    };\n  }\n\n  nameUpdate() {\n    //Here you will need to update the value of the filter with the value from the textbox\n    const val = this.myValue1.value;\n    console.log(val);\n    this.setState({\n      name: val\n    });\n  }\n\n  codeUpdate() {\n    //Here you will need to update the value of the filter with the value from the textbox\n    const val = this.myValue2.value;\n    console.log(val);\n    this.setState({\n      code: val\n    });\n  }\n\n  addressUpdate() {\n    //Here you will need to update the value of the filter with the value from the textbox\n    const val = this.myValue3.value;\n    console.log(val);\n    this.setState({\n      address: val\n    });\n  }\n\n  addNew() {\n    console.log(this.state.name);\n    const building = {\n      name: this.state.name,\n      code: this.state.code,\n      address: this.state.address,\n      coordinate: this.state.coordinate,\n      id: this.state.num\n    };\n    console.log(this.props.data);\n    this.props.data.push(building);\n    this.props.newViewUpdate();\n    this.state.num = this.state.num + 1;\n  }\n\n  render() {\n    //You will need to save the value from the textbox and update it as it changes\n    //You will need the onChange value for the input tag to capture the textbox value\n    if (this.props.showNew) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Type name of new building\",\n        ref: value => {\n          this.myValue1 = value;\n        },\n        onChange: this.nameUpdate.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Type code of new building\",\n        ref: value => {\n          this.myValue2 = value;\n        },\n        onChange: this.codeUpdate.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Type address of new building\",\n        ref: value => {\n          this.myValue3 = value;\n        },\n        onChange: this.addressUpdate.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        onClick: () => this.addNew(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Add this Building\"));\n    } else {\n      return React.createElement(\"p\", {\n        onClick: () => this.props.newViewUpdate(true),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Add Building\");\n    }\n  }\n\n}\n\nexport default AddBuilding;","map":{"version":3,"sources":["/Users/ren112/bootcamp4/src/components/RemoveBuilding.js"],"names":["React","AddBuilding","Component","constructor","props","state","name","nameUpdate","val","myValue1","value","console","log","setState","codeUpdate","myValue2","code","addressUpdate","myValue3","address","addNew","building","coordinate","id","num","data","push","newViewUpdate","render","showNew","bind"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass AddBuilding extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\"\n        };\n    }\n    nameUpdate() {\n        //Here you will need to update the value of the filter with the value from the textbox\n        const val = this.myValue1.value;\n        console.log(val)\n        this.setState({\n            name: val\n        })\n    }\n    codeUpdate() {\n        //Here you will need to update the value of the filter with the value from the textbox\n        const val = this.myValue2.value;\n        console.log(val)\n        this.setState({\n            code: val\n        })\n    }\n    addressUpdate() {\n        //Here you will need to update the value of the filter with the value from the textbox\n        const val = this.myValue3.value;\n        console.log(val)\n        this.setState({\n            address: val\n        })\n    }\n    addNew(){\n        console.log(this.state.name)\n        const building = {\n            name: this.state.name,\n            code: this.state.code,\n            address: this.state.address,\n            coordinate: this.state.coordinate,\n            id: this.state.num\n        }\n        console.log(this.props.data)\n        this.props.data.push(building)\n        this.props.newViewUpdate()\n        this.state.num = this.state.num + 1\n    }\n    render() {\n        //You will need to save the value from the textbox and update it as it changes\n        //You will need the onChange value for the input tag to capture the textbox value\n        if(this.props.showNew){\n            return (\n                <div>\n                <form>\n                    <input \n                        type=\"text\" \n                        placeholder=\"Type name of new building\" \n                        ref = {(value)=>{this.myValue1 = value}}\n                        onChange={this.nameUpdate.bind(this)}\n                    />\n                    <input \n                            type=\"text\" \n                            placeholder=\"Type code of new building\" \n                            ref = {(value)=>{this.myValue2 = value}}\n                            onChange={this.codeUpdate.bind(this)}\n                    />\n                    <input \n                            type=\"text\" \n                            placeholder=\"Type address of new building\" \n                            ref = {(value)=>{this.myValue3 = value}}\n                            onChange={this.addressUpdate.bind(this)}\n                    />\n                </form>\n                <p\n                    onClick={()=>this.addNew()}\n                    \n                >\n                    Add this Building\n                </p>\n                </div>\n            );\n        }\n        else{\n            return(\n            <p\n                onClick={()=>this.props.newViewUpdate(true)}\n            >\n                Add Building\n            </p>);\n        }\n    }\n}\nexport default AddBuilding;"]},"metadata":{},"sourceType":"module"}